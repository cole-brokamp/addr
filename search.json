[{"path":"https://cole-brokamp.github.io/addr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 hashdress authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://cole-brokamp.github.io/addr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Cole Brokamp. Author, maintainer.","code":""},{"path":"https://cole-brokamp.github.io/addr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Brokamp C (2024). addr: Clean, Parse, Harmonize, Hash Messy Real-World Addresses. R package version 0.3.1.9020, https://cole-brokamp.github.io/addr/, https://github.com/cole-brokamp/addr.","code":"@Manual{,   title = {addr: Clean, Parse, Harmonize, and Hash Messy Real-World Addresses},   author = {Cole Brokamp},   year = {2024},   note = {R package version 0.3.1.9020, https://cole-brokamp.github.io/addr/},   url = {https://github.com/cole-brokamp/addr}, }"},{"path":"https://cole-brokamp.github.io/addr/index.html","id":"addr","dir":"","previous_headings":"","what":"Clean, Parse, Harmonize, and Hash Messy Real-World Addresses","title":"Clean, Parse, Harmonize, and Hash Messy Real-World Addresses","text":"Addresses validated time collection often heterogenously formatted, making difficult directly compare. goal addr clean, parse, standardize, match messy, real-world addresses R use data linkages.","code":""},{"path":"https://cole-brokamp.github.io/addr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Clean, Parse, Harmonize, and Hash Messy Real-World Addresses","text":"can install development version addr GitHub : addr requires working Rust toolchain; install one using rustup.","code":"# install.packages(\"pak\") pak::pak(\"cole-brokamp/addr\")"},{"path":[]},{"path":"https://cole-brokamp.github.io/addr/index.html","id":"addr-vectors-in-r","dir":"","previous_headings":"Using","what":"addr vectors in R","title":"Clean, Parse, Harmonize, and Hash Messy Real-World Addresses","text":"addr package provides addr R object, stores standardized address tags, acts like usual vector R: hood, addr vector keeps record tagged standardized address components can used functions. inspect use directly: ","code":"library(addr) addr(c(\"3333 Burnet Ave Cincinnati OH 45229\", \"202 Riva Ridge Ct Cincinnati OH 45140\")) #> <addr[2]> #> [1] 3333 Burnet Avenue Cincinnati OH 45229   #> [2] 202 Riva Ridge Court Cincinnati OH 45140 addr(c(\"3333 Burnet Ave Cincinnati OH 45229\", \"202 Riva Ridge Ct Cincinnati OH 45140\")) |>   as.data.frame() #>   street_number street_name street_type       city state zip_code #> 1          3333      burnet      avenue cincinnati    oh    45229 #> 2           202  riva ridge       court cincinnati    oh    45140 addr(c(\"3333 Burnet Ave Cincinnati OH 45229\", \"202 Riva Ridge Ct Cincinnati OH 45140\")) |>   as.character() #> [1] \"3333 Burnet Avenue Cincinnati OH 45229\"   #> [2] \"202 Riva Ridge Court Cincinnati OH 45140\""},{"path":"https://cole-brokamp.github.io/addr/index.html","id":"addr-matching","dir":"","previous_headings":"Using","what":"addr matching","title":"Clean, Parse, Harmonize, and Hash Messy Real-World Addresses","text":"List potentially matching addrs reference set addrs addr_match(). code matches input addresses reference set addresses Hamilton County, OH included package: Use matched addr vector merge address-specific data included cagis_addr object. exact matching fails, use matching TIGER street range files US census: addresses possibly located one street range geography, use summarize argument return centroid set matched street ranges add TIGER/Line census block group identifers via geospatial intersection: process conducted, default matching arguments, function addr_match_geocode, requires vector reference s2 cell locations: now, process works cagis_s2 available matching within Hamilton County, OH (36061) using 2022 TIGER street range files","code":"addr(c(\"3333 Burnet Ave Cincinnati OH 45229\",      \"5130 RAPID RUN RD CINCINNATI OHIO 45238\",     \"5131 RAPID RUN RD CINCINNATI OHIO 45238\" )) |>   addr_match(cagis_addr()$cagis_addr) #> <addr[3]> #> [1] 3333 Burnet Avenue Cincinnati OH 45229      #> [2] 5130 Rapid Run Road Delhi Township OH 45238 #> [3] NA addr(c(\"3333 Burnet Ave Cincinnati OH 45229\", \"5130 RAPID RUN RD CINCINNATI OHIO 45238\")) |>   addr_match(cagis_addr()$cagis_addr) |>   tibble::enframe(name = \"input_addr\", value = \"ca\") |>   dplyr::left_join(cagis_addr(), by = c(\"ca\" = \"cagis_addr\")) #> # A tibble: 2 × 3 #>   input_addr                                          ca    cagis_addr_data #>        <int>                                      <addr> <list<tibble[,6]>> #> 1          1      3333 Burnet Avenue Cincinnati OH 45229            [1 × 6] #> 2          2 5130 Rapid Run Road Delhi Township OH 45238            [1 × 6] addr(c(\"3333 Burnet Ave Cincinnati OH 45229\", \"5130 RAPID RUN RD CINCINNATI OHIO 45238\")) |>   addr_match_tiger_street_ranges() #> $`3333 Burnet Avenue Cincinnati OH 45229` #> # A tibble: 2 × 4 #>   TLID      s2_geography                                            from    to #>   <chr>     <s2_geography>                                         <dbl> <dbl> #> 1 103925697 LINESTRING (-84.500403 39.14089, -84.500289 39.141892)  3301  3399 #> 2 103925699 LINESTRING (-84.500525 39.139737, -84.500403 39.14089)  3247  3398 #>  #> $`5130 Rapid Run Road Cincinnati OHIO 45238` #> # A tibble: 1 × 4 #>   TLID      s2_geography                                              from    to #>   <chr>     <s2_geography>                                           <dbl> <dbl> #> 1 650346231 LINESTRING (-84.608444 39.110496, -84.6087 39.110523, -…  5094  5199 addr(c(\"3333 Burnet Ave Cincinnati OH 45229\", \"5130 RAPID RUN RD CINCINNATI OHIO 45238\")) |>   addr_match_tiger_street_ranges(county = \"39061\", summarize = \"centroid\") |>   dplyr::bind_rows() |>   dplyr::mutate(census_bg_id = s2_join_tiger_bg(s2::as_s2_cell(s2_geography))) #> # A tibble: 2 × 5 #>   TLID                s2_geography                    from    to census_bg_id #>   <chr>               <s2_geography>                 <dbl> <dbl> <chr>        #> 1 103925697-103925699 POINT (-84.5004091 39.1408146)  3247  3399 390610270002 #> 2 650346231           POINT (-84.6103702 39.1110311)  5094  5199 390610214011 # select one s2 cell at random from addresses with more than one parcel identifier and coordinates cagis_s2 <-    cagis_addr()$cagis_addr_data |>    purrr::modify_if(\\(.) length(.) > 0 && nrow(.) > 1, dplyr::slice_sample, n = 1) |>    purrr::map_vec(purrr::pluck, \"cagis_s2\", .default = NA, .ptype = s2::s2_cell())     addr_match_geocode(x = sample(voter_addresses(), 100),                     ref_addr = cagis_addr()$cagis_addr,                    ref_s2 = cagis_s2,                    county = \"39061\",                    year = \"2022\") #> # A tibble: 100 × 3 #>                                           addr s2               match_method #>                                         <addr> <s2cell>         <fct>        #>  1     411 Pedretti Avenue Cincinnati OH 45238 8841b6192539a2e5 ref_addr     #>  2    7432 Bayswater Drive Cincinnati OH 45255 8841af3264f87405 tiger_range  #>  3      5366 Dickens Drive Cincinnati OH 45241 884051140ea170a7 ref_addr     #>  4        245 Mcguire Lane Cincinnati OH 45215 88405286586bc095 ref_addr     #>  5     3909 Dickson Avenue Cincinnati OH 45229 8841b30e55fab54d ref_addr     #>  6      4025 Egbert Avenue Cincinnati OH 45220 8841b37c962f5a3b ref_addr     #>  7   11451 Folkstone Drive Cincinnati OH 45240 88404ebd7161497d ref_addr     #>  8  1860 Queen City Avenue Cincinnati OH 45214 8841b43472fe3997 ref_addr     #>  9 9797 Cooper Woods Court Cincinnati OH 45241 88405251fbc59f91 ref_addr     #> 10       3815 Lincoln Road Cincinnati OH 45247 88403554febe6d93 ref_addr     #> # ℹ 90 more rows"},{"path":"https://cole-brokamp.github.io/addr/reference/addr-vctrs.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal vctrs methods — addr-vctrs","title":"Internal vctrs methods — addr-vctrs","text":"Internal vctrs methods","code":""},{"path":"https://cole-brokamp.github.io/addr/reference/addr.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new addr vector — addr","title":"Create a new addr vector — addr","text":"addr vector created converting messy, real-world mailing addresses character vector list standardized address tags behaves like vector. addr() (as_addr()) vectors list address tags hood, constructed tagging address components using addr_tag() combining specific fields: street_number: AddressNumber street_name: StreetNamePreType, StreetNamePreDirectional, StreetName street_type: StreetNamePostType, StreetNamePostDirectional city: PlaceName state: StateName zip_code: ZipCode","code":""},{"path":"https://cole-brokamp.github.io/addr/reference/addr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new addr vector — addr","text":"","code":"addr(   x = character(),   clean_address_text = TRUE,   expand_street_type = TRUE,   abbrev_cardinal_dir = TRUE,   clean_zip_code = TRUE )  as_addr(x, ...)"},{"path":"https://cole-brokamp.github.io/addr/reference/addr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a new addr vector — addr","text":"x character vector address strings clean_address_text logical; use clean_address_text() clean address text prior tagging? expand_street_type logical; use expand_post_type() expand StreetNamePostType tags? (e.g., \"Ave\" -> \"Avenue\") abbrev_cardinal_dir logical; abbreviate cardinal directions? (e.g., \"west\" -> \"w\") clean_zip_code logical; remove non-digit (hyphen) characters truncate tagged ZIP Code 5 characters? ... used pass arguments as_addr underlying addr()","code":""},{"path":"https://cole-brokamp.github.io/addr/reference/addr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a new addr vector — addr","text":"addition cleaning steps described arguments, street number coerced numeric removing non-numeric characters. See addr_tag() details address component tagging. case address one word tag (e.g., \"Riva Ridge\" StreetName), concatenated together, separated space order appeared address. Compared using addr(), as_addr() processes input character strings parsing done per unique input, usually speeding address parsing real-world datasets address strings often duplicated across observations.","code":""},{"path":"https://cole-brokamp.github.io/addr/reference/addr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a new addr vector — addr","text":"","code":"as_addr(c(\"3333 Burnet Ave Cincinnati OH 45229\", \"1324 Burnet Ave Cincinnati OH 45229\")) #> <addr[2]> #> [1] 3333 Burnet Avenue Cincinnati OH 45229 #> [2] 1324 Burnet Avenue Cincinnati OH 45229"},{"path":"https://cole-brokamp.github.io/addr/reference/addr_match.html","id":null,"dir":"Reference","previous_headings":"","what":"matching addr vectors — addr_match","title":"matching addr vectors — addr_match","text":"addr vector, string distances calculated reference addr vector (ref_addr). list matching reference addr vectors less equal specified optimal string alignment distances returned. See stringdist::stringdist-metrics details string metrics optimal string alignment (osa) method.","code":""},{"path":"https://cole-brokamp.github.io/addr/reference/addr_match.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"matching addr vectors — addr_match","text":"","code":"addr_match(   x,   ref_addr,   stringdist_match = c(\"osa_lt_1\", \"exact\"),   match_street_type = TRUE,   simplify = TRUE )  addr_match_street_name_and_number(   x,   ref_addr,   stringdist_match = c(\"osa_lt_1\", \"exact\"),   match_street_type = TRUE,   simplify = TRUE )  addr_match_street(   x,   ref_addr,   stringdist_match = c(\"osa_lt_1\", \"exact\"),   match_street_type = TRUE )"},{"path":"https://cole-brokamp.github.io/addr/reference/addr_match.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"matching addr vectors — addr_match","text":"x addr vector match ref_addr addr vector search matches stringdist_match method determining string match street name: \"osa_lt_1\" requires optimized string distance less 1; \"exact\" requires exact match match_street_type logical; require street type identical match? simplify logical; randomly select one addr multi-matches return addr() vector instead list? (empty addr vectors NULL values converted NA)","code":""},{"path":"https://cole-brokamp.github.io/addr/reference/addr_match.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"matching addr vectors — addr_match","text":"addr_match() addr_match_street_name_number(), named list possible addr matches addr x addr_match_street, list possible addr matches addr x (ref_addr indices)","code":""},{"path":"https://cole-brokamp.github.io/addr/reference/addr_match.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"matching addr vectors — addr_match","text":"","code":"addr(c(\"3333 Burnet Ave Cincinnati OH 45229\", \"5130 RAPID RUN RD CINCINNATI OHIO 45238\")) |>   addr_match(cagis_addr()$cagis_addr) #> <addr[2]> #> [1] 3333 Burnet Avenue Cincinnati OH 45229      #> [2] 5130 Rapid Run Road Delhi Township OH 45238  addr(c(\"3333 Burnet Ave Cincinnati OH 45229\", \"5130 RAPID RUN RD CINCINNATI OHIO 45238\")) |>   addr_match(cagis_addr()$cagis_addr, simplify = FALSE) |>   tibble::enframe(name = \"input_addr\", value = \"ca\") |>   dplyr::mutate(ca = purrr::list_c(ca)) |>   dplyr::left_join(cagis_addr(), by = c(\"ca\" = \"cagis_addr\")) |>   tidyr::unnest(cols = c(cagis_addr_data)) |>   dplyr::select(-ca, -cagis_address) #> # A tibble: 2 × 6 #>   input_addr     cagis_address_place cagis_address_type cagis_s2 cagis_parcel_id #>   <chr>          <chr>               <chr>              <s2cell> <chr>           #> 1 3333 Burnet A… NA                  BLD                8841b39… 010400020052    #> 2 5130 Rapid Ru… NA                  BLD                8841c9f… 054000510478    #> # ℹ 1 more variable: cagis_is_condo <lgl>"},{"path":"https://cole-brokamp.github.io/addr/reference/addr_match_geocode.html","id":null,"dir":"Reference","previous_headings":"","what":"geocode addr vectors — addr_match_geocode","title":"geocode addr vectors — addr_match_geocode","text":"Addresses matched set reference addresses; unmatched, next matched TIGER street ranges number street name, returning centroid (unionized) matched street range(s).","code":""},{"path":"https://cole-brokamp.github.io/addr/reference/addr_match_geocode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"geocode addr vectors — addr_match_geocode","text":"","code":"addr_match_geocode(   x,   ref_addr = cagis_addr()$cagis_addr,   ref_s2,   county = \"39061\",   year = \"2022\" )"},{"path":"https://cole-brokamp.github.io/addr/reference/addr_match_geocode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"geocode addr vectors — addr_match_geocode","text":"x addr vector (character vector address strings) geocode ref_addr addr vector search matches ref_s2 s2_cell vector locations ref_addr county character county identifer TIGER street range files search matches year character year TIGER street range files search matches ","code":""},{"path":"https://cole-brokamp.github.io/addr/reference/addr_match_geocode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"geocode addr vectors — addr_match_geocode","text":"tibble columns: addr contains x converted addr vector, s2 contains resulting geocoded s2 cells s2cell vector, match_method factor levels ref_addr, tiger_range, none record method address matched","code":""},{"path":"https://cole-brokamp.github.io/addr/reference/addr_match_geocode.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"geocode addr vectors — addr_match_geocode","text":"Performance compared degauss geocoder (see /inst/compare_geocoding_to_degauss.R) using real-world addresses voter_addresses(). Match success rates highly similar: Among geocoded , 97.7% geocoded census tract:","code":""},{"path":"https://cole-brokamp.github.io/addr/reference/addr_match_geocode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"geocode addr vectors — addr_match_geocode","text":"","code":"cagis_s2 <-   cagis_addr()$cagis_addr_data |>   purrr::modify_if(\\(.) length(.) > 0 && nrow(.) > 1, dplyr::slice_sample, n = 1) |>   purrr::map_vec(purrr::pluck, \"cagis_s2\", .default = NA, .ptype = s2::s2_cell()) addr_match_geocode(x = sample(voter_addresses(), 100), ref_s2 = cagis_s2) #> matching addresses in 10/38 ZIP codes [1.3s elapsed]  #> matching addresses in 23/38 ZIP codes [4.3s elapsed]  #> matching addresses in 38/38 ZIP codes [7.4s elapsed]  #>  #> # A tibble: 100 × 3 #>                                          addr s2               match_method #>                                        <addr> <s2cell>         <fct>        #>  1       9756 Ross Avenue Cincinnati OH 45242 88405386f89c2569 ref_addr     #>  2        1621 1st Avenue Cincinnati OH 45205 8841b5dbee7c2bbf ref_addr     #>  3      9854 Arvin Avenue Cincinnati OH 45231 88404bbd8470be7d ref_addr     #>  4   7324 Hillside Avenue Cincinnati OH 45233 8841cc0783e2b755 ref_addr     #>  5   10885 Carolitrace Road Harrison OH 45030 NA               none         #>  6       2944 Hull Avenue Cincinnati OH 45211 8841b5783ed3f5e9 ref_addr     #>  7 5310 Timberchase Court Cincinnati OH 45247 8841cab7436adf0d ref_addr     #>  8 5236 Valley Ridge Road Cincinnati OH 45247 8841cada7af313b9 ref_addr     #>  9        10650 Marvin Road Harrison OH 45030 88402dc45e31f31f ref_addr     #> 10   3700 Grovedale Place Cincinnati OH 45208 8841b2632a33ccc1 ref_addr     #> # ℹ 90 more rows"},{"path":"https://cole-brokamp.github.io/addr/reference/addr_match_tiger_street_ranges.html","id":null,"dir":"Reference","previous_headings":"","what":"match an addr vector to a tigris street range — addr_match_tiger_street_ranges","title":"match an addr vector to a tigris street range — addr_match_tiger_street_ranges","text":"match addr vector tigris street range","code":""},{"path":"https://cole-brokamp.github.io/addr/reference/addr_match_tiger_street_ranges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"match an addr vector to a tigris street range — addr_match_tiger_street_ranges","text":"","code":"addr_match_tiger_street_ranges(   x,   county = \"39061\",   year = \"2022\",   street_only_match = TRUE,   summarize = c(\"none\", \"union\", \"centroid\") )"},{"path":"https://cole-brokamp.github.io/addr/reference/addr_match_tiger_street_ranges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"match an addr vector to a tigris street range — addr_match_tiger_street_ranges","text":"x addr vector match county character string county identifier year year tigris product street_only_match logical; consider addr matches street name, street number within listed ranges match? summarize optionally summarize matched street ranges union centroid","code":""},{"path":"https://cole-brokamp.github.io/addr/reference/addr_match_tiger_street_ranges.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"match an addr vector to a tigris street range — addr_match_tiger_street_ranges","text":"list matched tigris street range tibbles; NULL value indicates street name matched; street_only_match FALSE, street range tibble zero rows indicates although street matched, range containing street number","code":""},{"path":"https://cole-brokamp.github.io/addr/reference/addr_match_tiger_street_ranges.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"match an addr vector to a tigris street range — addr_match_tiger_street_ranges","text":"","code":"my_addr <- as_addr(c(\"224 Woolper Ave\", \"3333 Burnet Ave\", \"33333 Burnet Ave\", \"609 Walnut St\"))  addr_match_tiger_street_ranges(my_addr, county = \"39061\", street_only_match = FALSE) #> $`224 Woolper Avenue` #> # A tibble: 1 × 4 #>   TLID      s2_geography                                              from    to #>   <chr>     <s2_geography>                                           <dbl> <dbl> #> 1 103924294 LINESTRING (-84.511197 39.149684, -84.511752 39.149788,…   100   299 #>  #> $`3333 Burnet Avenue` #> # A tibble: 2 × 4 #>   TLID      s2_geography                                            from    to #>   <chr>     <s2_geography>                                         <dbl> <dbl> #> 1 103925697 LINESTRING (-84.500403 39.14089, -84.500289 39.141892)  3301  3399 #> 2 103925699 LINESTRING (-84.500525 39.139737, -84.500403 39.14089)  3247  3398 #>  #> $`33333 Burnet Avenue` #> # A tibble: 0 × 4 #> # ℹ 4 variables: TLID <chr>, s2_geography <s2_geography>, from <dbl>, to <dbl> #>  #> $`609 Walnut Street` #> NULL #>   addr_match_tiger_street_ranges(my_addr, county = \"39061\", summarize = \"centroid\") #> $`224 Woolper Avenue` #> # A tibble: 1 × 4 #>   TLID      s2_geography                    from    to #>   <chr>     <s2_geography>                 <dbl> <dbl> #> 1 103924294 POINT (-84.5148163 39.1499943)   100   299 #>  #> $`3333 Burnet Avenue` #> # A tibble: 1 × 4 #>   TLID                s2_geography                    from    to #>   <chr>               <s2_geography>                 <dbl> <dbl> #> 1 103925697-103925699 POINT (-84.5004091 39.1408146)  3247  3399 #>  #> $`33333 Burnet Avenue` #> # A tibble: 1 × 4 #>   TLID                                                  s2_geography  from    to #>   <chr>                                                 <s2_geograp> <dbl> <dbl> #> 1 103925448-103925451-103925453-103925455-103925697-10… POINT (-84.…  2000  3599 #>  #> $`609 Walnut Street` #> NULL #>   addr_match_tiger_street_ranges(my_addr, county = \"39061\", summarize = \"centroid\") |>   dplyr::bind_rows() |>   dplyr::mutate(census_bg_id = s2_join_tiger_bg(s2::as_s2_cell(s2_geography))) #> # A tibble: 3 × 5 #>   TLID                                     s2_geography  from    to census_bg_id #>   <chr>                                    <s2_geograp> <dbl> <dbl> <chr>        #> 1 103924294                                POINT (-84.…   100   299 390610070002 #> 2 103925697-103925699                      POINT (-84.…  3247  3399 390610270002 #> 3 103925448-103925451-103925453-103925455… POINT (-84.…  2000  3599 390610270002"},{"path":"https://cole-brokamp.github.io/addr/reference/addr_tag.html","id":null,"dir":"Reference","previous_headings":"","what":"Tag components of an address string — addr_tag","title":"Tag components of an address string — addr_tag","text":"address components tagged using rust port usaddress. Component names based upon United States Thoroughfare, Landmark, Postal Address Data Standard.","code":""},{"path":"https://cole-brokamp.github.io/addr/reference/addr_tag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tag components of an address string — addr_tag","text":"","code":"addr_tag(x, clean_address_text = TRUE)"},{"path":"https://cole-brokamp.github.io/addr/reference/addr_tag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tag components of an address string — addr_tag","text":"x character vector addresses clean_address_text logical; use clean_address_text() clean addresses prior tagging?","code":""},{"path":"https://cole-brokamp.github.io/addr/reference/addr_tag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tag components of an address string — addr_tag","text":"list, length x, named character vectors address component tags; vector contains space-separated elements cleaned address named based inferred address labels (see Details)","code":""},{"path":"https://cole-brokamp.github.io/addr/reference/addr_tag.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tag components of an address string — addr_tag","text":"Possible address labels include: AddressNumberPrefix AddressNumberSuffix AddressNumber BuildingName CornerOf IntersectionSeparator LandmarkName NotAddress OccupancyIdentifier OccupancyType PlaceName Recipient StateName StreetNamePostDirectional StreetNamePostType StreetNamePreDirectional StreetNamePreModifier StreetNamePreType StreetName SubaddressIdentifier SubaddressType USPSBoxGroupID USPSBoxGroupType USPSBoxID USPSBoxType ZipCode Find information definitions ","code":""},{"path":"https://cole-brokamp.github.io/addr/reference/addr_tag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tag components of an address string — addr_tag","text":"","code":"addr_tag(c(\"290 Ludlow Avenue Apt #2 Cincinnati OH 45220\", \"3333 Burnet Ave Cincinnati OH 45219\")) #> [[1]] #>       AddressNumber          StreetName  StreetNamePostType       OccupancyType  #>               \"290\"            \"Ludlow\"            \"Avenue\"               \"Apt\"  #> OccupancyIdentifier           PlaceName           StateName             ZipCode  #>                 \"2\"        \"Cincinnati\"                \"OH\"             \"45220\"  #>  #> [[2]] #>      AddressNumber         StreetName StreetNamePostType          PlaceName  #>             \"3333\"           \"Burnet\"              \"Ave\"       \"Cincinnati\"  #>          StateName            ZipCode  #>               \"OH\"            \"45219\"  #>"},{"path":"https://cole-brokamp.github.io/addr/reference/cagis_addr.html","id":null,"dir":"Reference","previous_headings":"","what":"CAGIS Addresses — cagis_addr","title":"CAGIS Addresses — cagis_addr","text":"CAGIS Addresses","code":""},{"path":"https://cole-brokamp.github.io/addr/reference/cagis_addr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CAGIS Addresses — cagis_addr","text":"","code":"cagis_addr()"},{"path":"https://cole-brokamp.github.io/addr/reference/cagis_addr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"CAGIS Addresses — cagis_addr","text":"example tibble created CAGIS addresses pre-calculated, unique cagis_addr vector column. cagis_addr_data column list tibbles one CAGIS address can correspond multiple parcel identifiers address-level data (place, type, s2, etc.). See inst/make_cagis_addr.R source code create data, including filtering criteria: use addresses STATUS ASSIGNED USING orphaned (ORPHANFLG == \"N\") omit addresses ADDRTYPEs milemarkers (MM), parks (PAR), infrastructure projects (PRJ), cell towers (CTW), vacant commercial lots (LOT), miscellaneous non-residential addresses (MIS, RR, TBA) s2 cell derived LONGITUDE LATITUDE fields CAGIS address database","code":""},{"path":"https://cole-brokamp.github.io/addr/reference/cagis_addr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"CAGIS Addresses — cagis_addr","text":"","code":"cagis_addr() #> # A tibble: 307,206 × 2 #>                                   cagis_addr    cagis_addr_data #>                                       <addr> <list<tibble[,6]>> #>  1            1 1st Street Addyston OH 45001            [1 × 6] #>  2   1 A Tanglewood Lane Cincinnati OH 45224            [1 × 6] #>  3        1 Abbey Place Indian Hill OH 45243            [1 × 6] #>  4          1 Abbey Hill North Bend OH 45052            [1 × 6] #>  5    1 Abbington Ridge Indian Hill OH 45242            [1 × 6] #>  6         1 Adelle Walk Greenhills OH 45218            [1 × 6] #>  7         1 Albert Place Mariemont OH 45227            [1 × 6] #>  8         1 Alcott Lane Greenhills OH 45218            [1 × 6] #>  9 1 Anderson Ferry Road Cincinnati OH 45204            [1 × 6] #> 10        1 Andover Road Greenhills OH 45218            [1 × 6] #> # ℹ 307,196 more rows"},{"path":"https://cole-brokamp.github.io/addr/reference/clean_address_text.html","id":null,"dir":"Reference","previous_headings":"","what":"clean address text — clean_address_text","title":"clean address text — clean_address_text","text":"remove excess whitespace; keep letters, numbers, -","code":""},{"path":"https://cole-brokamp.github.io/addr/reference/clean_address_text.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"clean address text — clean_address_text","text":"","code":"clean_address_text(.x)"},{"path":"https://cole-brokamp.github.io/addr/reference/clean_address_text.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"clean address text — clean_address_text","text":".x vector address character strings","code":""},{"path":"https://cole-brokamp.github.io/addr/reference/clean_address_text.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"clean address text — clean_address_text","text":"vector cleaned addresses","code":""},{"path":"https://cole-brokamp.github.io/addr/reference/clean_address_text.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"clean address text — clean_address_text","text":"","code":"clean_address_text(c(   \"3333 Burnet Ave Cincinnati OH 45219\",   \"33_33 Burnet Ave. Cincinnati OH 45219\",   \"33\\\\33 B\\\"urnet Ave; Ci!ncinn&*ati OH 45219\",   \"3333 Burnet Ave Cincinnati OH 45219\",   \"33_33 Burnet Ave. Cincinnati OH 45219\" )) #> [1] \"3333 Burnet Ave Cincinnati OH 45219\" \"3333 Burnet Ave Cincinnati OH 45219\" #> [3] \"3333 Burnet Ave Cincinnati OH 45219\" \"3333 Burnet Ave Cincinnati OH 45219\" #> [5] \"3333 Burnet Ave Cincinnati OH 45219\""},{"path":"https://cole-brokamp.github.io/addr/reference/elh_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Example real-world data with line-one-only addresses — elh_data","title":"Example real-world data with line-one-only addresses — elh_data","text":"Cincinnati Evicition Hotspots data downloaded Eviction Labs contains characteristics top 100 buildings responsible 25% eviction filings Cincinnati (\"current 8-31-2024\" release).","code":""},{"path":"https://cole-brokamp.github.io/addr/reference/elh_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example real-world data with line-one-only addresses — elh_data","text":"","code":"elh_data()"},{"path":"https://cole-brokamp.github.io/addr/reference/elh_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Example real-world data with line-one-only addresses — elh_data","text":"tibble 100 rows 9 columns","code":""},{"path":"https://cole-brokamp.github.io/addr/reference/elh_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Example real-world data with line-one-only addresses — elh_data","text":"https://evictionlab.org/eviction-tracking/cincinnati-oh/","code":""},{"path":"https://cole-brokamp.github.io/addr/reference/elh_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example real-world data with line-one-only addresses — elh_data","text":"","code":"elh_data() #> # A tibble: 100 × 9 #>    position time_period end_date   xplaintiff xstreet_clean filings top100   lat #>       <dbl> <date>      <date>     <chr>      <chr>           <dbl>  <dbl> <dbl> #>  1        1 2023-09-01  2024-08-31 CINCINNAT… 2958 HIGHFOR…     265  0.247  39.2 #>  2        2 2023-09-01  2024-08-31 FOUR TOWE… 2705 E TOWER…     133  0.247  39.1 #>  3        3 2023-09-01  2024-08-31 NPRC PARK… 2310 WALDEN …      77  0.247  39.3 #>  4        4 2023-09-01  2024-08-31 LAFEUILLE… 2680 LAFEUIL…      67  0.247  39.1 #>  5        5 2023-09-01  2024-08-31 LUMA PROP… 1903 DREXEL …      57  0.247  39.3 #>  6        6 2023-09-01  2024-08-31 HOMES, PA… 1528 DUDLEY …      56  0.247  39.1 #>  7        7 2023-09-01  2024-08-31 UPTOWN CO… 400 W 9TH ST       55  0.247  39.1 #>  8        8 2023-09-01  2024-08-31 NPRC PARK… 2325 WALDEN …      54  0.247  39.3 #>  9        9 2023-09-01  2024-08-31 MALLARD L… 11923 CROSSI…      53  0.247  39.3 #> 10       10 2023-09-01  2024-08-31 NPRC APEX… 5317 EASTKNO…      52  0.247  39.2 #> # ℹ 90 more rows #> # ℹ 1 more variable: lon <dbl>"},{"path":"https://cole-brokamp.github.io/addr/reference/expand_post_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Expand street name post type — expand_post_type","title":"Expand street name post type — expand_post_type","text":"Abbreviations street type (e.g., \"Ave\", \"St\") converted expanded versions (e.g., \"Avenue\", \"Street\").","code":""},{"path":"https://cole-brokamp.github.io/addr/reference/expand_post_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expand street name post type — expand_post_type","text":"","code":"expand_post_type(x)"},{"path":"https://cole-brokamp.github.io/addr/reference/expand_post_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expand street name post type — expand_post_type","text":"x character vector StreetnamePostType abbreviations","code":""},{"path":"https://cole-brokamp.github.io/addr/reference/expand_post_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expand street name post type — expand_post_type","text":"character vector length containing expanded street name post type","code":""},{"path":"https://cole-brokamp.github.io/addr/reference/expand_post_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Expand street name post type — expand_post_type","text":"","code":"expand_post_type(c(\"ave\", \"av\", \"Avenue\", \"tl\")) #> [1] \"avenue\" \"avenue\" \"avenue\" \"trail\""},{"path":"https://cole-brokamp.github.io/addr/reference/get_tiger_block_groups.html","id":null,"dir":"Reference","previous_headings":"","what":"get s2_geography for census block groups — get_tiger_block_groups","title":"get s2_geography for census block groups — get_tiger_block_groups","text":"get s2_geography census block groups","code":""},{"path":"https://cole-brokamp.github.io/addr/reference/get_tiger_block_groups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get s2_geography for census block groups — get_tiger_block_groups","text":"","code":"get_tiger_block_groups(state, year)"},{"path":"https://cole-brokamp.github.io/addr/reference/get_tiger_block_groups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get s2_geography for census block groups — get_tiger_block_groups","text":"state census FIPS state identifier year vintage TIGER/Line block group geography files","code":""},{"path":"https://cole-brokamp.github.io/addr/reference/get_tiger_block_groups.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get s2_geography for census block groups — get_tiger_block_groups","text":"tibble GEOID s2_geography columns","code":""},{"path":"https://cole-brokamp.github.io/addr/reference/get_tiger_block_groups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"get s2_geography for census block groups — get_tiger_block_groups","text":"","code":"get_tiger_block_groups(state = \"39\", year = \"2022\") #> # A tibble: 9,472 × 2 #>    GEOID        s2_geography                                                     #>  * <chr>        <s2_geography>                                                   #>  1 390852066001 POLYGON ((-81.461604 41.652185, -81.460816 41.651534, -81.45845… #>  2 390351979003 POLYGON ((-81.666516 41.486301, -81.665777 41.483463, -81.66573… #>  3 390351033002 POLYGON ((-81.71348 41.492984, -81.713172 41.492554, -81.71302 … #>  4 390351974002 POLYGON ((-81.717885 41.443313, -81.717864 41.442858, -81.71782… #>  5 390351602003 POLYGON ((-81.814159 41.485348, -81.813741 41.485325, -81.81291… #>  6 390351070002 POLYGON ((-81.695658 41.420909, -81.695532 41.420489, -81.69511… #>  7 390351811006 POLYGON ((-81.8738 41.489473, -81.873677 41.485366, -81.873614 … #>  8 390351109014 POLYGON ((-81.678605 41.45506, -81.676828 41.455123, -81.676629… #>  9 390351158003 POLYGON ((-81.634537 41.441404, -81.633304 41.44141, -81.633148… #> 10 390351361051 POLYGON ((-81.684852 41.278905, -81.684831 41.278047, -81.68481… #> # ℹ 9,462 more rows"},{"path":"https://cole-brokamp.github.io/addr/reference/get_tiger_street_ranges.html","id":null,"dir":"Reference","previous_headings":"","what":"Get tigris street range geography files from census.gov — get_tiger_street_ranges","title":"Get tigris street range geography files from census.gov — get_tiger_street_ranges","text":"Downloaded files cached tools::R_user_dir(\"addr\", \"cache\"). Street ranges missing minimum maximum address numbers excluded.","code":""},{"path":"https://cole-brokamp.github.io/addr/reference/get_tiger_street_ranges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get tigris street range geography files from census.gov — get_tiger_street_ranges","text":"","code":"get_tiger_street_ranges(county, year = \"2022\")"},{"path":"https://cole-brokamp.github.io/addr/reference/get_tiger_street_ranges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get tigris street range geography files from census.gov — get_tiger_street_ranges","text":"county character string county identifier year year tigris product","code":""},{"path":"https://cole-brokamp.github.io/addr/reference/get_tiger_street_ranges.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get tigris street range geography files from census.gov — get_tiger_street_ranges","text":"list tibbles, one street name, TLID, s2_geography, , columns","code":""},{"path":"https://cole-brokamp.github.io/addr/reference/get_tiger_street_ranges.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get tigris street range geography files from census.gov — get_tiger_street_ranges","text":"","code":"Sys.setenv(\"R_USER_CACHE_DIR\" = tempfile()) get_tiger_street_ranges(\"39061\")[1001:1004] #> <list_of< #>   tbl_df< #>     TLID        : character #>     s2_geography: s2_geography #>     from        : double #>     to          : double #>   > #> >[4]> #> $`Bridgecreek Dr` #> # A tibble: 5 × 4 #>   TLID      s2_geography                                              from    to #>   <chr>     <s2_geography>                                           <dbl> <dbl> #> 1 627893439 LINESTRING (-84.518038 39.237373, -84.518037 39.237248)   9301  9327 #> 2 627893440 LINESTRING (-84.518038 39.237373, -84.51802 39.237481, …  9310  9326 #> 3 637586321 LINESTRING (-84.517673 39.236089, -84.517688 39.236225,…  9200  9294 #> 4 637586322 LINESTRING (-84.517948 39.236947, -84.517967 39.237009,…  9296  9306 #> 5 645615840 LINESTRING (-84.51794 39.237697, -84.517789 39.237925, …  9328  9399 #>  #> $`Bridgeknoll Ct` #> # A tibble: 1 × 4 #>   TLID      s2_geography                                              from    to #>   <chr>     <s2_geography>                                           <dbl> <dbl> #> 1 103952990 LINESTRING (-84.645545 39.144769, -84.645801 39.144859,…  3200  3299 #>  #> $`Bridgeport Ln` #> # A tibble: 3 × 4 #>   TLID      s2_geography                                              from    to #>   <chr>     <s2_geography>                                           <dbl> <dbl> #> 1 103943261 LINESTRING (-84.512157 39.30345, -84.512079 39.304385)   12100 12199 #> 2 103943264 LINESTRING (-84.512233 39.302483, -84.512181 39.303229,… 12046 12099 #> 3 103943265 LINESTRING (-84.512337 39.301232, -84.512233 39.302483)  11900 12045 #>  #> $`Bridges Rd` #> # A tibble: 3 × 4 #>   TLID      s2_geography                                              from    to #>   <chr>     <s2_geography>                                           <dbl> <dbl> #> 1 103940363 LINESTRING (-84.364851 39.093519, -84.365029 39.093423,…  6900  7106 #> 2 103956809 LINESTRING (-84.363794 39.090174, -84.362162 39.090046)   7101  7145 #> 3 103956810 LINESTRING (-84.362162 39.090046, -84.362018 39.090026,…  7138  7299 #>"},{"path":"https://cole-brokamp.github.io/addr/reference/grapes-set-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"zeallot operator — %<-%","title":"zeallot operator — %<-%","text":"Multiple, unpacking, destructuring assignment R zeallot package","code":""},{"path":"https://cole-brokamp.github.io/addr/reference/s2_join_tiger_bg.html","id":null,"dir":"Reference","previous_headings":"","what":"Tiger Block Groups — s2_join_tiger_bg","title":"Tiger Block Groups — s2_join_tiger_bg","text":"Get identifier closest census block group based intersection s2 cell locations US Census TIGER/Line shapefiles","code":""},{"path":"https://cole-brokamp.github.io/addr/reference/s2_join_tiger_bg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tiger Block Groups — s2_join_tiger_bg","text":"","code":"s2_join_tiger_bg(x, year = as.character(2013:2023))"},{"path":"https://cole-brokamp.github.io/addr/reference/s2_join_tiger_bg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tiger Block Groups — s2_join_tiger_bg","text":"x s2_cell vector year vintage TIGER/Line block group geography files","code":""},{"path":"https://cole-brokamp.github.io/addr/reference/s2_join_tiger_bg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tiger Block Groups — s2_join_tiger_bg","text":"character vector matched census block group identifiers","code":""},{"path":"https://cole-brokamp.github.io/addr/reference/s2_join_tiger_bg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tiger Block Groups — s2_join_tiger_bg","text":"","code":"s2_join_tiger_bg(x = s2::as_s2_cell(c(\"8841b39a7c46e25f\", \"8841a45555555555\")), year = \"2023\") #> [1] \"390610032001\" \"210370519034\""},{"path":"https://cole-brokamp.github.io/addr/reference/tiger_states.html","id":null,"dir":"Reference","previous_headings":"","what":"get s2_geography for census states — tiger_states","title":"get s2_geography for census states — tiger_states","text":"get s2_geography census states","code":""},{"path":"https://cole-brokamp.github.io/addr/reference/tiger_states.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get s2_geography for census states — tiger_states","text":"","code":"tiger_states(year)"},{"path":"https://cole-brokamp.github.io/addr/reference/tiger_states.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get s2_geography for census states — tiger_states","text":"year vintage TIGER/Line block group geography files","code":""},{"path":"https://cole-brokamp.github.io/addr/reference/tiger_states.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get s2_geography for census states — tiger_states","text":"tibble GEOID s2_geography columns","code":""},{"path":"https://cole-brokamp.github.io/addr/reference/tiger_states.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"get s2_geography for census states — tiger_states","text":"","code":"tiger_states(year = \"2022\") #> # A tibble: 56 × 2 #>    GEOID s2_geography                                                            #>  * <chr> <s2_geography>                                                          #>  1 54    POLYGON ((-77.754491 39.333491, -77.75477 39.333564, -77.755728 39.333… #>  2 12    MULTIPOLYGON (((-83.108914 24.611086, -83.107532 24.597996, -83.106113… #>  3 17    POLYGON ((-87.890943 38.283384, -87.889059 38.284378, -87.888223 38.28… #>  4 27    POLYGON ((-95.328669 48.998935, -95.339996 48.998953, -95.351322 48.99… #>  5 24    POLYGON ((-75.756947 39.257786, -75.756969 39.258067, -75.756999 39.25… #>  6 44    MULTIPOLYGON (((-71.678302 41.148904, -71.676092 41.141502, -71.672644… #>  7 16    POLYGON ((-116.372438 49.000415, -116.396825 49.00032, -116.428668 49.… #>  8 33    POLYGON ((-70.838799 43.244589, -70.838799 43.244666, -70.838768 43.24… #>  9 37    POLYGON ((-77.899887 36.544597, -77.900124 36.544601, -77.900487 36.54… #> 10 50    POLYGON ((-72.041956 44.156631, -72.04214 44.15659, -72.042431 44.1565… #> # ℹ 46 more rows"},{"path":"https://cole-brokamp.github.io/addr/reference/usaddress_tag.html","id":null,"dir":"Reference","previous_headings":"","what":"Return list of lists of address tags to R. — usaddress_tag","title":"Return list of lists of address tags to R. — usaddress_tag","text":"Return list lists address tags R.","code":""},{"path":"https://cole-brokamp.github.io/addr/reference/usaddress_tag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return list of lists of address tags to R. — usaddress_tag","text":"","code":"usaddress_tag(input)"},{"path":"https://cole-brokamp.github.io/addr/reference/usaddress_tag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return list of lists of address tags to R. — usaddress_tag","text":"input character string addresses","code":""},{"path":"https://cole-brokamp.github.io/addr/reference/voter_addresses.html","id":null,"dir":"Reference","previous_headings":"","what":"Example real-world addresses — voter_addresses","title":"Example real-world addresses — voter_addresses","text":"voter_addresses data generated example character vector real-world addresses. addresses downloaded Hamilton County, Ohio voter registration database 2024-09-12. See inst/make_example_addresses.R details. AddressPreDirectional, AddressNumber, AddressStreet, AddressSuffix, CityName, \"OH\", AddressZip pasted together create 242,133 unique addresses registered voters Hamilton County, OH.","code":""},{"path":"https://cole-brokamp.github.io/addr/reference/voter_addresses.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example real-world addresses — voter_addresses","text":"","code":"voter_addresses()"},{"path":"https://cole-brokamp.github.io/addr/reference/voter_addresses.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Example real-world addresses — voter_addresses","text":"character vector","code":""},{"path":"https://cole-brokamp.github.io/addr/reference/voter_addresses.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example real-world addresses — voter_addresses","text":"","code":"voter_addresses() |>   head() #> [1] \"3359 QUEEN CITY AVE CINCINNATI OH 45238\" #> [2] \"1040 KREIS LN CINCINNATI OH 45205\"       #> [3] \"9960 DALY RD CINCINNATI OH 45231\"        #> [4] \"413 VOLKERT PL CINCINNATI OH 45219\"      #> [5] \"8519 LINDERWOOD LN CINCINNATI OH 45255\"  #> [6] \"6361 BEECHMONT AVE CINCINNATI OH 45230\""}]
